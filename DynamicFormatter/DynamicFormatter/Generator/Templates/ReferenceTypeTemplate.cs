// ------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Версия среды выполнения: 15.0.0.0
//  
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DynamicFormatter.Generator.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using DynamicFormatter.Extentions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class ReferenceTypeTemplate : ReferenceTypeTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\tpublic class ");
            
            #line 8 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.className));
            
            #line default
            #line hidden
            this.Write(" :IResolver<");
            
            #line 8 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write(">\r\n\t{\r\n\t");
            
            #line 10 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
foreach(var field in this.typeInfo.Fields)
	  {
		if(this.isPrivate(field) || this.isPrivate())
		{

			if(this.typeInfo.IsValueType)
			{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tFunc<");
            
            #line 17 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 17 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FieldFullName(field)));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 17 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write("> Setter_");
            
            #line 17 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n\t\t\t");
            
            #line 19 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
			else
			{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tpublic Action<");
            
            #line 22 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 22 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FieldFullName(field)));
            
            #line default
            #line hidden
            this.Write("> Setter_");
            
            #line 22 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t");
            
            #line 23 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\tpublic Func<");
            
            #line 25 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 25 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FieldFullName(field)));
            
            #line default
            #line hidden
            this.Write("> Getter_");
            
            #line 25 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n\t\t");
            
            #line 27 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
		
	 }
            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\tTypeInfo typeInfo;\r\n\r\n\t\tpublic ");
            
            #line 33 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.className));
            
            #line default
            #line hidden
            this.Write("()\r\n\t\t{\r\n\t\t\t");
            
            #line 35 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
if(!this.isPrivate())
			{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tthis.typeInfo = TypeInfo.instanse(typeof(");
            
            #line 37 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write("));\r\n\t\t\t");
            
            #line 38 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
			else
			{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tthis.typeInfo = TypeInfo.instanse(");
            
            #line 41 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetHash(this.typeInfo.Type)));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t");
            
            #line 42 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t");
            
            #line 44 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
foreach(var field in this.typeInfo.Fields)
			{
				if(this.isPrivate())
				{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tParameterExpression p1 = Expression.Parameter(typeof(");
            
            #line 49 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write("), \"p1\");\r\n\t\t\t\t\t\t\t\t\t\t\tExpression body = Expression.Field(Expression.Convert(p1, t" +
                    "his.typeInfo.Type), this.typeInfo.Fields.Single(x => RuntimeHelpers.GetHashCode(" +
                    "x) ==");
            
            #line 50 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetHash(field)));
            
            #line default
            #line hidden
            this.Write("));\r\n\t\t\t\t\t\t\t\t\t\t\tvar lambda = Expression.Lambda<Func<");
            
            #line 51 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 51 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FieldFullName(field)));
            
            #line default
            #line hidden
            this.Write(">>(body, p1);\r\n\t\t\t\t\t\t\t\t\t\t\tGetter_");
            
            #line 52 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(" = lambda.Compile();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t");
            
            #line 55 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
if(!this.typeInfo.IsValueType)
					{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tParameterExpression p1 = Expression.Parameter(typeof(");
            
            #line 58 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write("), \"p1\");\r\n\t\t\t\t\t\t\t\t\t\tParameterExpression p2 = Expression.Parameter(typeof(");
            
            #line 59 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FieldFullName(field)));
            
            #line default
            #line hidden
            this.Write("), \"p2\");\r\n\r\n\t\t\t\t\t\t\t\t\t\tvar m1 = Expression.MakeMemberAccess(Expression.Convert(p1" +
                    ",this.typeInfo.Type), this.typeInfo.Fields.Single(x => RuntimeHelpers.GetHashCod" +
                    "e(x) ==");
            
            #line 61 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetHash(field)));
            
            #line default
            #line hidden
            this.Write("));\r\n\t\t\t\t\t\t\t\t\t\tExpression body = Expression.Assign(m1,Expression.Convert(p2,Typei" +
                    "nfo.instanse(");
            
            #line 62 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetHash(field.FieldType)));
            
            #line default
            #line hidden
            this.Write(").Type));\r\n\t\t\t\t\t\t\t\t\t\tvar lambda = Expression.Lambda<Action<");
            
            #line 63 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 63 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FieldFullName(field)));
            
            #line default
            #line hidden
            this.Write(">>(body, p1, p2);\r\n\t\t\t\t\t\t\t\t\t\tSetter_");
            
            #line 64 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(" = lambda.Compile();\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t");
            
            #line 66 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
					else
					{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tParameterExpression p1 = Expression.Parameter(typeof(");
            
            #line 70 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write("), \"p1\");\r\n\t\t\t\t\t\t\t\t\t\t\t\tParameterExpression p2 = Expression.Parameter(typeof(");
            
            #line 71 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FieldFullName(field)));
            
            #line default
            #line hidden
            this.Write("), \"p2\");\r\n\t\t\t\t\t\t\t\t\t\t\t\tParameterExpression SturctObjectParam = Expression.Variabl" +
                    "e(this.typeInfo.Type, \"Struct\");\r\n\t\t\t\t\t\t\t\t\t\t\t\tParameterExpression retObjectParam" +
                    " = Expression.Variable(typeof(");
            
            #line 73 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write("), \"ret\");\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tLabelTarget returnTarget = Expression.Label(typeof(");
            
            #line 75 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write(@"));


												var assignToRet = Expression.Assign(SturctObjectParam, Expression.Convert(p1,this.typeInfo.Type));
												var makeMeberAccess = Expression.MakeMemberAccess(SturctObjectParam, this.typeInfo.Fields.Single(x => RuntimeHelpers.GetHashCode(x) ==");
            
            #line 79 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetHash(field)));
            
            #line default
            #line hidden
            this.Write(@"));

												var assign = Expression.Assign(makeMeberAccess, p2);
												var assingnToResult = Expression.Assign(
																				retObjectParam,
																				 Expression.Convert(SturctObjectParam,typeof(object)));

												GotoExpression returnExpression = Expression.Return(returnTarget,
																								retObjectParam, typeof(");
            
            #line 87 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write(@"));

												LabelExpression returnLabel = Expression.Label(returnTarget, retObjectParam);

												BlockExpression block = Expression.Block(
																						new ParameterExpression[] { SturctObjectParam, retObjectParam },
																						assignToRet,
																						assign,
																						assingnToResult,
																						returnExpression,
																						returnLabel);
												var lambda = Expression.Lambda<Func<");
            
            #line 98 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 98 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FieldFullName(field)));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 98 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write(">>(block, p1, p2);\r\n\t\t\t\t\t\t\t\t\t\t\t\tSetter_");
            
            #line 99 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(" = lambda.Compile();\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t");
            
            #line 101 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 102 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
				else if(this.isPrivate(field))
				{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tParameterExpression p1 = Expression.Parameter(typeof(");
            
            #line 106 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write("), \"p1\");\r\n\t\t\t\t\t\t\t\t\t\t\tExpression body = Expression.Field(p1, this.typeInfo.Fields" +
                    ".Single(x => RuntimeHelpers.GetHashCode(x) ==");
            
            #line 107 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetHash(field)));
            
            #line default
            #line hidden
            this.Write("));\r\n\t\t\t\t\t\t\t\t\t\t\t");
            
            #line 108 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
if(this.isPrivateClass(field.FieldType))
											{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\tbody = Expression.Convert(body,typeof(object));\r\n\t\t\t\t\t\t\t\t\t\t\t");
            
            #line 111 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\tvar lambda = Expression.Lambda<Func<");
            
            #line 112 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 112 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FieldFullName(field)));
            
            #line default
            #line hidden
            this.Write(">>(body, p1);\r\n\t\t\t\t\t\t\t\t\t\t\tGetter_");
            
            #line 113 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(" = lambda.Compile();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t");
            
            #line 115 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
if(!this.typeInfo.IsValueType)
							{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tParameterExpression p1 = Expression.Parameter(type" +
                    "of(");
            
            #line 119 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write("), \"p1\");\r\n\t\t\t\t\t\t\t\t\t\tParameterExpression p2 = Expression.Parameter(typeof(");
            
            #line 120 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FieldFullName(field)));
            
            #line default
            #line hidden
            this.Write("), \"p2\");\r\n\r\n\t\t\t\t\t\t\t\t\t\tvar m1 = Expression.MakeMemberAccess(p1, this.typeInfo.Fie" +
                    "lds.Single(x => RuntimeHelpers.GetHashCode(x) ==");
            
            #line 122 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetHash(field)));
            
            #line default
            #line hidden
            this.Write("));\r\n\t\t\t\t\t\t\t\t\t\t");
            
            #line 123 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
if(this.isPrivateClass(field.FieldType))
										{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\tBinaryExpression body = Expression.Assign(m1, Expression.Convert(p2,th" +
                    "is.typeInfo.Fields.Single(x => RuntimeHelpers.GetHashCode(x) ==");
            
            #line 125 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetHash(field)));
            
            #line default
            #line hidden
            this.Write(").FieldType));\r\n\t\t\t\t\t\t\t\t\t\t");
            
            #line 126 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
										else
										{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\tBinaryExpression body = Expression.Assign(m1, p2);\r\n\t\t\t\t\t\t\t\t\t\t");
            
            #line 130 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tvar lambda = Expression.Lambda<Action<");
            
            #line 132 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 132 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FieldFullName(field)));
            
            #line default
            #line hidden
            this.Write(">>(body, p1, p2);\r\n\t\t\t\t\t\t\t\t\t\tSetter_");
            
            #line 133 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(" = lambda.Compile();\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t");
            
            #line 136 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
							else
							{
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tParameterExpression p1 = Expression.Parameter(typeof(");
            
            #line 141 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write("), \"p1\");\r\n\t\t\t\t\t\t\t\tParameterExpression p2 = Expression.Parameter(typeof(");
            
            #line 142 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FieldFullName(field)));
            
            #line default
            #line hidden
            this.Write("), \"p2\");\r\n\t\t\t\t\t\t\t\tParameterExpression SturctObjectParam = Expression.Variable(ty" +
                    "peof(");
            
            #line 143 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write("), \"Struct\");\r\n\t\t\t\t\t\t\t\tParameterExpression retObjectParam = Expression.Variable(t" +
                    "ypeof(");
            
            #line 144 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write("), \"ret\");\r\n\r\n\t\t\t\t\t\t\t\tLabelTarget returnTarget = Expression.Label(typeof(");
            
            #line 146 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write("));\r\n\r\n\r\n\t\t\t\t\t\t\t\tvar assignToRet = Expression.Assign(SturctObjectParam, p1);\r\n\t\t\t" +
                    "\t\t\t\t\tvar makeMeberAccess = Expression.MakeMemberAccess(SturctObjectParam, this.t" +
                    "ypeInfo.Fields.Single(x => RuntimeHelpers.GetHashCode(x) ==");
            
            #line 150 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetHash(field)));
            
            #line default
            #line hidden
            this.Write(@"));

								var assign = Expression.Assign(makeMeberAccess, p2);
								var assingnToResult = Expression.Assign(
																retObjectParam,
																(SturctObjectParam));

								GotoExpression returnExpression = Expression.Return(returnTarget,
																				retObjectParam, typeof(");
            
            #line 158 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write(@"));

								LabelExpression returnLabel = Expression.Label(returnTarget, retObjectParam);

								BlockExpression block = Expression.Block(
																		new ParameterExpression[] { SturctObjectParam, retObjectParam },
																		assignToRet,
																		assign,
																		assingnToResult,
																		returnExpression,
																		returnLabel);
								var lambda = Expression.Lambda<Func<");
            
            #line 169 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 169 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FieldFullName(field)));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 169 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write(">>(block, p1, p2);\r\n\t\t\t\t\t\t\t\tSetter_");
            
            #line 170 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(" = lambda.Compile();\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t");
            
            #line 173 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
					}
			}
			
            
            #line default
            #line hidden
            this.Write(@"
		}


		public unsafe byte[] Serialize(object Entity, DynamicBuffer buff, Dictionary<object, DynamicBuffer.BufferPtr> referenceMaping)
		{
			if (Entity == null)
			{
				return BitConverter.GetBytes(((short)-1));
			}
			DynamicBuffer.BufferPtr ptr;
			if (referenceMaping.TryGetValue(Entity,out ptr))
			{
				return BitConverter.GetBytes(ptr.position);
			}
			ptr = buff.Alloc(");
            
            #line 192 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.typeInfo.Size));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\tshort position = ptr.position;\r\n\t\t\tint offset = (int)position;\r\n\t\t\tbyte[] " +
                    "buffer = buff.CurrentBuffer;\r\n\r\n\t\t\t");
            
            #line 197 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write(" entity = (");
            
            #line 197 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write(")Entity;\r\n\r\n\t\t\t");
            
            #line 199 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
foreach(var field in this.typeInfo.Fields)
			{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t{\r\n\t\t\t\t\t");
            
            #line 202 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FieldFullName(field)));
            
            #line default
            #line hidden
            this.Write(" value = ");
            
            #line 202 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"


					if(this.isPrivate(field))
					{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tGetter_");
            
            #line 206 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write("(entity);\r\n\t\t\t\t\t");
            
            #line 207 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
					else
					{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tentity.");
            
            #line 210 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t\t\t");
            
            #line 211 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
					
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 214 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
if(this.isPrimitive(field))
					{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tBaseConvertor.Write");
            
            #line 216 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.SizeInBuffer(field) * 8));
            
            #line default
            #line hidden
            this.Write("(buffer,offset,(byte*)&value);\r\n\t\t\t\t\t");
            
            #line 217 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
					else
					{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tbyte[] result = TypeResolveFactory.ResolveSerialize(");
            
            #line 220 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetHash(field.FieldType)));
            
            #line default
            #line hidden
            this.Write(",value,buff,referenceMaping);\r\n\t\t\t\t\t\tSystem.Buffer.BlockCopy(result, 0, buffer, o" +
                    "ffset, result.Length);\r\n\t\t\t\t\t");
            
            #line 222 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\toffset += ");
            
            #line 224 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.SizeInBuffer(field)));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n\t\t\t\t}\r\n\t\t\t");
            
            #line 227 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
			return BitConverter.GetBytes(position);
		}


		public object instanse(int offset, DynamicBuffer buff, Dictionary<int, object> referenceMaping)
		{
			byte[] buffer = buff.CurrentBuffer;

			short position = (short)offset == 0 ?
				 (short)0 : BaseConvertor.GetShort(buffer, offset);

			if (position == -1)
			{
				return null;
			}
			if(referenceMaping.ContainsKey(position))
			{
				return referenceMaping[position];
			}
			offset = position;

			var entity = (");
            
            #line 250 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TypeName()));
            
            #line default
            #line hidden
            this.Write(")FormatterServices.GetSafeUninitializedObject(this.typeInfo.Type);\r\n\t\t\treferenceM" +
                    "aping.Add(position, entity);\r\n\t\t\toffset++;\r\n\t\t\t");
            
            #line 253 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
foreach(var field in this.typeInfo.Fields)
			{
				if(this.isPrimitive(field))
				{
					if(this.isPrivate(field))
					{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t");
            
            #line 259 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
if(this.typeInfo.IsValueType)
						{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\tentity = Setter_");
            
            #line 261 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(".Invoke(entity,BaseConvertor.Get");
            
            #line 261 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetTypePrefix(field)));
            
            #line default
            #line hidden
            this.Write("(buffer, offset));\r\n\t\t\t\t\t\t");
            
            #line 262 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
						else
						{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\tSetter_");
            
            #line 265 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(".Invoke(entity,BaseConvertor.Get");
            
            #line 265 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetTypePrefix(field)));
            
            #line default
            #line hidden
            this.Write("(buffer, offset));\r\n\t\t\t\t\t\t");
            
            #line 266 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
					}
					else
					{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\tentity.");
            
            #line 270 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(" = BaseConvertor.Get");
            
            #line 270 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetTypePrefix(field)));
            
            #line default
            #line hidden
            this.Write("(buffer, offset);\r\n\t\t\t\t\t");
            
            #line 271 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
					}
			  else if(field.FieldType == typeof(string))
			  {
            
            #line default
            #line hidden
            this.Write("\t\t\t\tstring ");
            
            #line 275 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(" = DesirializeString(offset,buff,referenceMaping);\r\n\t\t\t\t");
            
            #line 276 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
if(this.isPrivate(field))
				{
					if(this.typeInfo.IsValueType)
					{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tentity = Setter_");
            
            #line 280 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(".Invoke(entity,");
            
            #line 280 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t\t\t");
            
            #line 281 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
					else
					{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tSetter_");
            
            #line 284 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(".Invoke(entity,");
            
            #line 284 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t\t\t");
            
            #line 285 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
				}
				else
				{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tentity.");
            
            #line 289 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write("  = ");
            
            #line 289 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t\t");
            
            #line 290 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
			 }
			 else if(this.isEnum(field))
			 {
				
					if(this.isPrivate(field))
					{
					if(this.typeInfo.IsValueType)
					{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tentity = Setter_");
            
            #line 299 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(".Invoke(entity,(");
            
            #line 299 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldType.FullName));
            
            #line default
            #line hidden
            this.Write(")BaseConvertor.GetInt(buffer,offset));\r\n\t\t\t\t\t");
            
            #line 300 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
					else
					{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tSetter_");
            
            #line 303 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(".Invoke(entity,(");
            
            #line 303 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldType.FullName));
            
            #line default
            #line hidden
            this.Write(")BaseConvertor.GetInt(buffer,offset));\r\n\t\t\t\t\t");
            
            #line 304 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
				}
				else
				{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tentity.");
            
            #line 308 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write("  =  (");
            
            #line 308 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.FieldType.FullName));
            
            #line default
            #line hidden
            this.Write(")BaseConvertor.GetInt(buffer,offset);\r\n\t\t\t\t");
            
            #line 309 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}	
				
			 }
			 else if(this.isNullable(field))
			 {
            
            #line default
            #line hidden
            this.Write("\t\t\t\t{\r\n\t\t\t\t");
            
            #line 315 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FieldFullName(field)));
            
            #line default
            #line hidden
            this.Write(" fieldValue = null;\r\n\t\t\t\t\tshort ptrToNullable = BaseConvertor.GetShort(buffer, of" +
                    "fset);\r\n\t\t\t\t\tbool hasValue = BaseConvertor.GetBool(buffer,ptrToNullable);\r\n\t\t\t\t\t" +
                    "if(hasValue)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t");
            
            #line 320 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
var nullableTypeInfo = GetChildType(field);
						if(nullableTypeInfo.IsPrimitive || 
						nullableTypeInfo.Type == typeof(DateTime) || nullableTypeInfo.Type == typeof(Guid))
						{
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\tfieldValue = BaseConvertor.Get");
            
            #line 325 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetTypePrefix(nullableTypeInfo.Type)));
            
            #line default
            #line hidden
            this.Write("(buffer,ptrToNullable +1);\r\n\r\n\t\t\t\t\t\t");
            
            #line 327 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
						else
						{
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\t\t\t\t\t\tfieldValue =  (");
            
            #line 332 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FieldFullName(field)));
            
            #line default
            #line hidden
            this.Write(")TypeResolveFactory.ResolveDesirialize(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
            
            #line 333 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetHash(field.FieldType)));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toffset,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuff,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treferenc" +
                    "eMaping);\r\n\t\t\t\t\t\t");
            
            #line 337 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\r\n\r\n\r\n\t\t\t\t\t");
            
            #line 342 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
if(this.isPrivate(field))
					{
						if(this.typeInfo.IsValueType)
						{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\tentity = Setter_");
            
            #line 346 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(".Invoke(entity,fieldValue);\r\n\t\t\t\t\t\t");
            
            #line 347 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
						else
						{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\tSetter_");
            
            #line 350 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(".Invoke(entity,fieldValue);\r\n\t\t\t\t\t\t");
            
            #line 351 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
					}
					else
					{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\tentity.");
            
            #line 355 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(" = fieldValue;\r\n\t\t\t\t\t");
            
            #line 356 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t ");
            
            #line 361 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
			 else
			 {
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\r\n\t\t\t\t\t");
            
            #line 365 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FieldFullName(field)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 365 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write("_Result =(");
            
            #line 365 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FieldFullName(field)));
            
            #line default
            #line hidden
            this.Write(") TypeResolveFactory.ResolveDesirialize(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
            
            #line 366 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetHash(field.FieldType)));
            
            #line default
            #line hidden
            this.Write(",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toffset,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuff,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treferenc" +
                    "eMaping);\r\n\r\n\t\t\t\t");
            
            #line 371 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
if(this.isPrivate(field))
				{
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 374 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
if(this.typeInfo.IsValueType)
					{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\tentity = Setter_");
            
            #line 376 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(".Invoke(entity,");
            
            #line 376 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write("_Result);\r\n\t\t\t\t\t");
            
            #line 377 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
					else
					{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\tSetter_");
            
            #line 380 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write(".Invoke(entity,");
            
            #line 380 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write("_Result);\r\n\t\t\t\t\t");
            
            #line 381 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}

				}
				else
				{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tentity.");
            
            #line 386 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write("  = ");
            
            #line 386 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ValidateName(field)));
            
            #line default
            #line hidden
            this.Write("_Result;\r\n\t\t\t\t");
            
            #line 387 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}

			 }
            
            #line default
            #line hidden
            this.Write("\t\t\t  offset += ");
            
            #line 390 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetSizeInBuffer(field)));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t");
            
            #line 391 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t");
            
            #line 393 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
if(this.typeInfo.IsValueType)
			{
				
            
            #line default
            #line hidden
            this.Write("\t\t\t\treturn (object)entity;\r\n\t\t\t\t");
            
            #line 397 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"

			}
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\n\t\t\t");
            
            #line 402 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"
if(!this.typeInfo.IsValueType)
			{
				
            
            #line default
            #line hidden
            this.Write("return entity;");
            
            #line 404 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ReferenceTypeTemplate.tt"

			}
            
            #line default
            #line hidden
            this.Write(@"		}

		public unsafe string DesirializeString(int offset, DynamicBuffer buffer, Dictionary<int, object> referenceMaping)
		{
			fixed (byte* buf = buffer.CurrentBuffer)
			{
				short position = offset == 0 ? (short)0 : *(short*)(buf + offset);
				if (position == -1)
				{
					return null;
				}
				if (referenceMaping.ContainsKey(position))
				{
					return referenceMaping[position] as string;
				}
				int lenght = *(int*)(buf + position);

				fixed (char* charP = new char[lenght])
				{
					int bytesForCopy = sizeof(char) * lenght;
					byte* source = (buf + position + sizeof(int));
					Buffer.MemoryCopy(source, charP, bytesForCopy, bytesForCopy);
					return new String(charP);
				}
			}
		}
	}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class ReferenceTypeTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
