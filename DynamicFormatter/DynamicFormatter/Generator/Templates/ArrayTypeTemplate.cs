// ------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Версия среды выполнения: 15.0.0.0
//  
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DynamicFormatter.Generator.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using DynamicFormatter.Extentions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class ArrayTypeTemplate : ArrayTypeTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n\tpublic class ");
            
            #line 9 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.className));
            
            #line default
            #line hidden
            this.Write(" :IResolver<");
            
            #line 9 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeInfo.Type.FullName));
            
            #line default
            #line hidden
            this.Write(">\r\n\t{\r\n\t\tpublic unsafe byte[] Serialize(object Entity, DynamicBuffer buff, Dictio" +
                    "nary<object, DynamicBuffer.BufferPtr> referenceMaping)\r\n\t\t{\r\n\t\t\tint size = ");
            
            #line 13 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sizeof(int)));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n\t\t\tif (Entity == null)\r\n\t\t\t{\r\n\t\t\t\treturn BitConverter.GetBytes((short)-1);\r\n" +
                    "\t\t\t}\r\n\r\n\t\t\tif(referenceMaping.ContainsKey(Entity))\r\n\t\t\t{\r\n\t\t\t\treturn BitConverte" +
                    "r.GetBytes(referenceMaping[Entity].position);\r\n\t\t\t}\r\n\r\n\t\t\t");
            
            #line 25 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elementInfo.Type.FullName));
            
            #line default
            #line hidden
            this.Write("[] array = (");
            
            #line 25 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elementInfo.Type.FullName));
            
            #line default
            #line hidden
            this.Write("[])Entity;\r\n\r\n\t\t\tsize += ");
            
            #line 27 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elementInfo.SizeInBuffer));
            
            #line default
            #line hidden
            this.Write(" * array.Length;\r\n\r\n\t\t\tvar ptr = buff.Alloc(size);\r\n\r\n\t\t\tbyte[] buffer = buff.Cur" +
                    "rentBuffer;\r\n\r\n\t\t\treferenceMaping.Add(Entity, ptr);\r\n\t\t\t\r\n\t\t\tint offset = ptr.po" +
                    "sition;\r\n\r\n\t\t\tBaseConvertor.Write32(buffer,offset,(byte*)array.Length);\r\n\r\n\t\t\tof" +
                    "fset += ");
            
            #line 39 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sizeof(int)));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n\t\t\tfor(int i = 0;i<array.Length;i++)\r\n\t\t\t{\r\n\t\t\t\t");
            
            #line 43 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elementInfo.Type.FullName));
            
            #line default
            #line hidden
            this.Write(" value = array[i];\r\n\r\n\r\n\t\t\t\t\t");
            
            #line 46 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
if(this.isPrimitive())
					{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tBaseConvertor.Write");
            
            #line 48 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elementInfo.SizeInBuffer * 8));
            
            #line default
            #line hidden
            this.Write("(buffer,offset,(byte*)&value);\r\n\t\t\t\t\t");
            
            #line 49 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
}
					else if(this.elementInfo.Type == typeof(string))
					{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tbyte[] result = SerializeString(value,buff,referenceMaping);\r\n\t\t\t\t\t\tSystem." +
                    "Buffer.BlockCopy(result, 0, buffer, offset, result.Length);\r\n\t\t\t\t\t");
            
            #line 54 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
}
					else
					{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tbyte[] result = TypeResolveFactory.ResolveSerialize(");
            
            #line 57 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.GetHash(elementInfo.Type)));
            
            #line default
            #line hidden
            this.Write(",value,buff,referenceMaping);\r\n\t\t\t\t\t\tSystem.Buffer.BlockCopy(result, 0, buffer, o" +
                    "ffset, result.Length);\r\n\t\t\t\t\t");
            
            #line 59 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\t\t\t\toffset += ");
            
            #line 62 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.elementInfo.SizeInBuffer));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t}\r\n\r\n\t\t\t return BitConverter.GetBytes(ptr.position);\r\n\t\t}\r\n\r\n\t\t");
            
            #line 68 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
if(this.elementInfo.Type == typeof(string))
		{
            
            #line default
            #line hidden
            this.Write(@"			public unsafe byte[] SerializeString(object Entity, DynamicBuffer buf, Dictionary<object, DynamicBuffer.BufferPtr> referenceMaping)
		{
			if (Entity == null)
			{
				return BitConverter.GetBytes((short)-1);
			}
			if (referenceMaping.ContainsKey(Entity))
			{
				var bufferPtr = referenceMaping[Entity];
				return BitConverter.GetBytes(bufferPtr.position);
			}
			int charSize = sizeof(char);
			string entity = (string)Entity;
			int size = charSize * entity.Length + sizeof(int);
			var ptr = buf.Alloc(size);
			byte[] buffer = buf.CurrentBuffer;
			int offset = ptr.position;

			int lenght = entity.Length;

			BaseConvertor.Write32(buffer, offset, (byte*)&lenght);

			offset += sizeof(int);

			fixed (char* str = entity)
			fixed(byte* bufferPtr = buffer)
			{
				int bytesToCopy = charSize * entity.Length;
				Buffer.MemoryCopy(str, bufferPtr + offset, bytesToCopy, bytesToCopy);
			}

			return BitConverter.GetBytes(ptr.position);
		}
		");
            
            #line 103 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
		public object instanse(int offset, DynamicBuffer buff, Dictionary<int, object> referenceMaping)
		{
			byte[] buffer = buff.CurrentBuffer;

			short position = (short)offset == 0 ?
				 (short)0 : BaseConvertor.GetShort(buffer, offset);

			if (position == -1)
			{
				return null;
			}
			offset = position;

			int arrayLenght = BaseConvertor.GetInt(buffer, offset);

			");
            
            #line 120 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elementInfo.Type.FullName));
            
            #line default
            #line hidden
            this.Write("[] array = new ");
            
            #line 120 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elementInfo.Type.FullName));
            
            #line default
            #line hidden
            this.Write("[arrayLenght];\r\n\r\n\t\t\treferenceMaping.Add(position, array);\r\n\r\n\t\t\toffset += ");
            
            #line 124 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sizeof(int)));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n\t\t\tfor(int i = 0;i<arrayLenght;i++)\r\n\t\t\t{\r\n\t\t\t\t");
            
            #line 128 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
if(this.isPrimitive())
				{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tarray[i] = BaseConvertor.Get");
            
            #line 130 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Prefix));
            
            #line default
            #line hidden
            this.Write("(buffer, offset);\r\n\t\t\t\t\toffset += ");
            
            #line 131 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.elementInfo.SizeInBuffer));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t\t");
            
            #line 132 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
}
				else if(this.elementInfo.Type == typeof(string))
				{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tarray[i] = DesirializeString(offset,buff,referenceMaping);\r\n\t\t\t\t\toffset += ");
            
            #line 136 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sizeof(ushort)));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t\t");
            
            #line 137 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
}
				else
				{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tarray[i] = (");
            
            #line 140 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elementInfo.Type.FullName));
            
            #line default
            #line hidden
            this.Write(")TypeResolveFactory.ResolveDesirialize(typeof(");
            
            #line 140 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elementInfo.Type.FullName));
            
            #line default
            #line hidden
            this.Write("),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toffset,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuff,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treferen" +
                    "ceMaping);\r\n\t\t\t\t\toffset += ");
            
            #line 144 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.elementInfo.SizeInBuffer));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t\t");
            
            #line 145 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t}\r\n\t\t\treturn array;\r\n\t\t}\r\n\r\n\t\t");
            
            #line 150 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
if(this.elementInfo.Type == typeof(string))
		{
            
            #line default
            #line hidden
            this.Write(@"		public unsafe string DesirializeString(int offset, DynamicBuffer buffer, Dictionary<int, object> referenceMaping)
		{
			fixed (byte* buf = buffer.CurrentBuffer)
			{
				short position = offset == 0 ? (short)0 : *(short*)(buf + offset);
				if (position == -1)
				{
					return null;
				}
				if (referenceMaping.ContainsKey(position))
				{
					return referenceMaping[position] as string;
				}
				int lenght = *(int*)(buf + position);

				fixed (char* charP = new char[lenght])
				{
					int bytesForCopy = sizeof(char) * lenght;
					byte* source = (buf + position + sizeof(int));
					Buffer.MemoryCopy(source, charP, bytesForCopy, bytesForCopy);
					return new String(charP);
				}
			}
		}
		");
            
            #line 176 "C:\Users\Kirill\Documents\DynamicFormatter\DynamicFormatter\DynamicFormatter\Generator\Templates\ArrayTypeTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class ArrayTypeTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
